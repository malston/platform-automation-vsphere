---
resource_types:
  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final

resources:
  - name: opsman-product
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ((opsman_product_slug))
      product_version: ((opsman_version))

  - name: state
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.state))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: ((environment))/(state).yml
      skip_ssl_verification: true

  - name: pks-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: pivotal-container-service-(.*).pivotal
      skip_ssl_verification: true

  - name: pks-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: pks-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      skip_ssl_verification: true

  - name: harbor-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: harbor-container-registry-(.*)\.pivotal
      skip_ssl_verification: true

  - name: harbor-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: harbor-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz
      skip_ssl_verification: true

  - name: installation
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.installation))
      endpoint: ((s3.endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: installation-(.*).zip
      skip_ssl_verification: true

  - name: platform-automation-tasks
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      secret_access_key: ((s3_secret_access_key))
      regexp: platform-automation-tasks-(.*).zip
      disable_ssl: ((s3.disable_ssl))
      skip_ssl_verification: ((s3.skip_ssl_verification))
      endpoint: ((s3.endpoint))
  
  - name: platform-automation-image
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      secret_access_key: ((s3_secret_access_key))
      regexp: platform-automation-image-(.*).tgz
      disable_ssl: ((s3.disable_ssl))
      skip_ssl_verification: ((s3.skip_ssl_verification))
      endpoint: ((s3.endpoint))

  - name: config
    type: git
    source:
      uri: ((config.uri))
      private_key: ((config.private_key))
      branch: master

credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca.certificate))
    PREFIX: /platform-automation/((environment))
    INTERPOLATION_PATHS: "environments/((environment))/vars environments/((environment))/env"
  input_mapping:
    files: config
  output_mapping:
    interpolated-files: vars

jobs:
  - name: install-opsman
    serial: true
    serial_groups: [install]
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
        - get: config
        - get: state
        - get: opsman-product
          trigger: true
          params:
            globs:
              - '*.ova'
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-product
        params:
          VARS_FILES: vars/environments/((environment))/vars/opsman.yml
          STATE_FILE: state.yml
          OPSMAN_CONFIG_FILE: environments/((environment))/config/opsman.yml
        ensure: &put-state
          do:
            - put: state
              params:
                file: generated-state/state.yml
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: vars
          config: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          AUTH_CONFIG_FILE: environments/((environment))/vars/auth.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          DIRECTOR_CONFIG_FILE: environments/((environment))/config/director.yml
          VARS_FILES: vars/environments/((environment))/vars/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip

  - name: export-installation
    serial: true
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
          passed: [install-opsman]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
        - get: config
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [install]
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
          passed: [install-opsman]
        - get: config
        - get: state
        - get: opsman-product
          trigger: true
          params:
            globs:
              - '*.ova'
        - get: installation
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-product
          env: vars
        params:
          VARS_FILES: vars/environments/((environment))/vars/opsman.yml
          ENV_FILE: environments/((environment))/env/env.yml
          STATE_FILE: state.yml
          OPSMAN_CONFIG_FILE: environments/((environment))/config/opsman.yml
          INSTALLATION_FILE: installation-*.zip
        ensure: *put-state
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          DIRECTOR_CONFIG_FILE: environments/((environment))/config/director.yml
          VARS_FILES: vars/environments/((environment))/vars/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          INSTALLATION_FILE: installation-$timestamp.zip
      - put: installation
        params:
          file: installation/installation*.zip

  - name: upload-and-stage-pks
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
          passed: [upgrade-opsman]
        - get: config
        - get: pks-stemcell
          trigger: true
        - get: pks-product
          trigger: true
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          env: vars
          product: pks-product
        params:
          ENV_FILE: environments/((environment))/env/env.yml
      - task: uopload-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: vars
          stemcell: pks-stemcell
        params:
          ENV_FILE: environments/((environment))/env/env.yml

  - name: upload-and-stage-harbor
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
          passed: [upgrade-opsman]
        - get: config
        - get: harbor-stemcell
          trigger: true
        - get: harbor-product
          trigger: true
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          env: vars
          product: harbor-product
        params:
          ENV_FILE: environments/((environment))/env/env.yml
      - task: uopload-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: vars
          stemcell: harbor-stemcell
        params:
          ENV_FILE: environments/((environment))/env/env.yml

  - name: configure-pks
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
        - get: config
        - get: pks-stemcell
          trigger: true
          passed: [upload-and-stage-pks]
        - get: pks-product
          trigger: true
          passed: [upload-and-stage-pks]
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: configure-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          CONFIG_FILE: environments/((environment))/config/pks.yml
          VARS_FILES: vars/environments/((environment))/vars/pks.yml

  - name: configure-harbor
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
        - get: config
        - get: harbor-stemcell
          trigger: true
          passed: [upload-and-stage-harbor]
        - get: harbor-product
          trigger: true
          passed: [upload-and-stage-harbor]
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: configure-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml
          CONFIG_FILE: environments/((environment))/config/harbor.yml
          VARS_FILES: vars/environments/((environment))/vars/harbor.yml

  - name: apply-changes
    plan:
      - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
            globs: ["*image*"]
        - get: platform-automation-tasks
          params:
            unpack: true
            globs: ["*tasks*"]
        - get: config
        - get: harbor-stemcell
          trigger: true
          passed: [configure-harbor]
        - get: harbor-product
          trigger: true
          passed: [configure-harbor]
        - get: pks-stemcell
          trigger: true
          passed: [configure-pks]
        - get: pks-product
          trigger: true
          passed: [configure-pks]
      - task: credhub-interpolate
        <<: *credhub-interpolate
      - task: apply-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: vars
        params:
          ENV_FILE: environments/((environment))/env/env.yml

  - name: upgrade-cluster
    plan:
      - in_parallel:
        - get: repo
          resource: config
          # passed: [apply-changes]
      - task: login
        file: repo/tasks/pks-login/task.yml
        params:
          PKS_API_URL: ((pks_api_url))
          PKS_USER: ((pks_user))
          PKS_PASSWORD: ((pks_password))
      - task: upgrade-cluster
        file: repo/tasks/upgrade-cluster/task.yml
        params:
          CLUSTER: ((cluster))
          PKS_PASSWORD: ((pks_password))
          BOSH_ENVIRONMENT: ((bosh_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_client_secret))
          BOSH_CA_CERT: ((bosh_ca_cert))
          BOSH_ALL_PROXY: ((bosh_all_proxy))
